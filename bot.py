# bot.py ‚Äì –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –±–æ—Ç–∞
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.filters.state import StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from config import API_TOKEN, DB_DSN
from db import Database
from states import BuildAutoState, BuildManualState
from builder import build_pc

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()  # Aiogram v3: –º–æ–∂–Ω–æ —è–≤–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å loop, –æ–Ω –±–µ—Ä–µ—Ç—Å—è –∏–∑ asyncio

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (globally, then connect in startup)
db = Database(DB_DSN)

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def on_start(message: Message):
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    await db.add_user(message.from_user.id, message.from_user.username or message.from_user.full_name)
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
                    "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å–±–æ—Ä–∫—É –ü–ö –ø–æ —Ç–≤–æ–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.\n"
                    "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:")
    # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    menu_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü–æ–¥–æ–±—Ä–∞—Ç—å —Å–±–æ—Ä–∫—É", callback_data="auto")],
        [InlineKeyboardButton(text="üõ† –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º —Å–±–æ—Ä–∫–∏", callback_data="manual")],
        [InlineKeyboardButton(text="üíæ –ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–±–æ—Ä–∫–∏", callback_data="view_builds")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
    ])
    await message.answer(welcome_text, reply_markup=menu_kb)

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (CallbackQuery)
@dp.callback_query(lambda c: c.data in ["auto", "manual", "view_builds", "help"])
async def on_menu_click(callback: CallbackQuery, state: FSMContext):
    action = callback.data
    user_id = await db.get_user_id(callback.from_user.id)
    if action == "auto":
        # –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞
        await callback.message.answer("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä —Å–±–æ—Ä–∫–∏ –∑–∞–ø—É—â–µ–Ω.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ü–ö:", 
                                      reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                          [InlineKeyboardButton(text="üéÆ –ò–≥—Ä—ã", callback_data="usage_–ò–≥—Ä—ã")],
                                          [InlineKeyboardButton(text="üíº –†–∞–±–æ—Ç–∞/–û—Ñ–∏—Å", callback_data="usage_–†–∞–±–æ—Ç–∞")],
                                          [InlineKeyboardButton(text="üñ•Ô∏è –†–µ–Ω–¥–µ—Ä–∏–Ω–≥/3D", callback_data="usage_–†–µ–Ω–¥–µ—Ä–∏–Ω–≥")],
                                          [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="usage_–î—Ä—É–≥–æ–µ")]
                                      ]))
        await state.set_state(BuildAutoState.usage)
        await db.log_action(user_id, "start_auto_build")
    elif action == "manual":
        # –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Ä—É—á–Ω–æ–π —Å–±–æ—Ä–∫–∏
        await callback.message.answer("üîß –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º: –¥–∞–≤–∞–π—Ç–µ —Å–æ–±–µ—Ä—ë–º –ü–ö –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º.\n–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä:")
        # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ CPU (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–ø–æ–≤—ã—Ö CPU –∏–∑ –±–∞–∑—ã)
        cpu_list = await db.select_cpus(usage=None, max_price=None)
        # –û–≥—Ä–∞–Ω–∏—á–∏–º—Å—è 5 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        cpu_buttons = []
        for cpu in cpu_list[:5]:
            cpu_buttons.append([InlineKeyboardButton(text=f"{cpu['name']} ({cpu['price']} ‚ÇΩ)", callback_data=f"cpu_{cpu['id']}")])
        if not cpu_buttons:
            cpu_buttons.append([InlineKeyboardButton(text="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ CPU", callback_data="ignore")])
        cpu_kb = InlineKeyboardMarkup(inline_keyboard=cpu_buttons)
        await callback.message.answer("–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã:", reply_markup=cpu_kb)
        await state.set_state(BuildManualState.choosing_cpu)
        await db.log_action(user_id, "start_manual_build")
    elif action == "view_builds":
        # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–±–æ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        builds = await db.get_builds(user_id)
        if not builds:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–±–æ—Ä–æ–∫.")
        else:
            text = "üíæ *–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–±–æ—Ä–∫–∏:*\n"
            for rec in builds:
                price = rec.get('total_price') or 0
                text += f"- –°–±–æ—Ä–∫–∞ #{rec['id']} –æ—Ç {rec['created_at']}, —Å—É–º–º–∞ {price} ‚ÇΩ\n"
            text += "\n–ß—Ç–æ–±—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–±–æ—Ä–∫—É, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `/build <ID>`."
            await callback.message.answer(text, parse_mode="Markdown")
        await callback.answer()  # –ø—Ä–æ—Å—Ç–æ —É–±–µ—Ä—ë–º —á–∞—Å–∏–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ
    elif action == "help":
        help_text = ("*–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n"
                     "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Å–æ–±—Ä–∞—Ç—å –ü–ö. –í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–¥–±–æ—Ä–æ–º, —É–∫–∞–∑–∞–≤ –ª–∏—à—å —Ü–µ–ª—å –∏ –±—é–¥–∂–µ—Ç, –ª–∏–±–æ –≤—Ä—É—á–Ω—É—é –≤—ã–±–∏—Ä–∞—Ç—å –∫–∞–∂–¥—É—é –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â—É—é.\n"
                     "- –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–æ–±—Ä–∞—Ç—å —Å–±–æ—Ä–∫—É¬ª, —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏–ª –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.\n"
                     "- –ù–∞–∂–º–∏—Ç–µ ¬´–†—É—á–Ω–æ–π —Ä–µ–∂–∏–º —Å–±–æ—Ä–∫–∏¬ª, —á—Ç–æ–±—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.\n"
                     "- ¬´–ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–±–æ—Ä–∫–∏¬ª ‚Äì –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n"
                     "–ö–æ–º–∞–Ω–¥–∞ /cancel –æ—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å.\n"
                     "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!")
        await callback.message.answer(help_text, parse_mode="Markdown")
        await callback.answer()

# –•–µ–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—à–∞–≥ 1 –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä–∞, –ª–æ–≤–∏–º callback –æ—Ç –∫–Ω–æ–ø–æ–∫ "usage_...")
@dp.callback_query(lambda c: c.data and c.data.startswith("usage_"), StateFilter(BuildAutoState.usage))
async def on_choose_usage(callback: CallbackQuery, state):
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ü–µ–ª—å (–ø–æ—Å–ª–µ "usage_")
    usage = callback.data.split("usage_")[1]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(chosen_usage=usage)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é ‚Äì –∑–∞–ø—Ä–æ—Å –±—é–¥–∂–µ—Ç–∞
    await state.set_state(BuildAutoState.budget)
    await callback.message.answer(f"–¶–µ–ª—å: *{usage}*. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –≤ ‚ÇΩ:", parse_mode="Markdown")
    await callback.answer()  # —É–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

# –•–µ–Ω–¥–ª–µ—Ä –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞ (—à–∞–≥ 2 –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä–∞, –ª–æ–≤–∏–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ BuildAutoState.budget)
@dp.message(StateFilter(BuildAutoState.budget))
async def on_enter_budget(message: Message, state):
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞
    try:
        budget = int(message.text.strip().replace(" ", ""))
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –±—é–¥–∂–µ—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Ü–µ–ª—å –∏–∑ FSM
    data = await state.get_data()
    usage = data.get("chosen_usage", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–±–æ—Ä–∫—É
    await message.answer("‚åõ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –ø–æ–¥–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    build = await build_pc(db, usage, budget)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å–±–æ—Ä–∫—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(last_build=build)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å –∏—Ç–æ–≥–æ–≤–æ–π —Å–±–æ—Ä–∫–æ–π
    if not build or not build.get('cpu'):
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–±–æ—Ä–∫—É –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏.")
    else:
        total = build.get('total_price', 0)
        result_text = f"‚úÖ *–°–±–æ—Ä–∫–∞ \"{usage}\" –∑–∞ ~{total} ‚ÇΩ:*\n"
        if build.get('cpu'):
            result_text += f"- CPU: {build['cpu']['name']} ({build['cpu']['price']} ‚ÇΩ)\n"
        if build.get('motherboard'):
            result_text += f"- –ú–∞—Ç. –ø–ª–∞—Ç–∞: {build['motherboard']['name']} ({build['motherboard']['price']} ‚ÇΩ)\n"
        if build.get('ram'):
            result_text += f"- –û–ó–£: {build['ram']['name']} ({build['ram']['price']} ‚ÇΩ)\n"
        if build.get('gpu'):
            result_text += f"- –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: {build['gpu']['name']} ({build['gpu']['price']} ‚ÇΩ)\n"
        else:
            result_text += "- –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)\n"
        if build.get('storage'):
            result_text += f"- –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å: {build['storage']['name']} ({build['storage']['price']} ‚ÇΩ)\n"
        if build.get('psu'):
            result_text += f"- –ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è: {build['psu']['name']} ({build['psu']['price']} ‚ÇΩ)\n"
        if build.get('case'):
            result_text += f"- –ö–æ—Ä–ø—É—Å: {build['case']['name']} ({build['case']['price']} ‚ÇΩ)\n"
        if build.get('cooler'):
            result_text += f"- –ö—É–ª–µ—Ä: {build['cooler']['name']} ({build['cooler']['price']} ‚ÇΩ)\n"
        result_text += f"*–ò—Ç–æ–≥–æ:* {total} ‚ÇΩ\n"
        await message.answer(result_text, parse_mode="Markdown", 
                              reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                  [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–±–æ—Ä–∫—É", callback_data="save_build")],
                                  [InlineKeyboardButton(text="üîÑ –í –º–µ–Ω—é", callback_data="back_to_menu")]
                              ]))
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    user_id = await db.get_user_id(message.from_user.id)
    await db.log_action(user_id, f"auto_build_done_{usage}")


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ-–ø–æ–¥–±–æ—Ä–∞
@dp.callback_query(lambda c: c.data == "save_build")
async def on_save_build(callback: CallbackQuery, state: FSMContext):
    user_id = await db.get_user_id(callback.from_user.id)
    data = await state.get_data()
    build = data.get("last_build", {})
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    build_data = {
        'cpu_id': None,
        'motherboard_id': None,
        'ram_id': None,
        'gpu_id': None,
        'storage_id': None,
        'case_id': None,
        'psu_id': None,
        'cooler_id': None,
        'total_price': build.get('total_price')
    }
    await db.save_build(user_id, build_data)
    await callback.message.answer("üíæ –°–±–æ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—ë –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–±–æ—Ä–∫–∏'.")
    await db.log_action(user_id, "build_saved")
    await state.clear()
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ –∫–Ω–æ–ø–∫–µ "back_to_menu"
@dp.callback_query(lambda c: c.data == "back_to_menu")
async def on_back_to_menu(callback: CallbackQuery):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–Ω–æ–≤–æ
    menu_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü–æ–¥–æ–±—Ä–∞—Ç—å —Å–±–æ—Ä–∫—É", callback_data="auto")],
        [InlineKeyboardButton(text="üõ† –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º —Å–±–æ—Ä–∫–∏", callback_data="manual")],
        [InlineKeyboardButton(text="üíæ –ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–±–æ—Ä–∫–∏", callback_data="view_builds")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
    ])
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_kb)
    await callback.answer()

# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–≤—ã–±–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ)
@dp.callback_query(lambda c: c.data and c.data.startswith("cpu_"), StateFilter(BuildManualState.choosing_cpu))
async def manual_choose_cpu(callback: CallbackQuery, state):
    cpu_id = int(callback.data.split("cpu_")[1])
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π CPU –∏–∑ –±–∞–∑—ã
    cpu = None
    cpu_list = await db.select_cpus(None)
    for c in cpu_list:
        if c['id'] == cpu_id:
            cpu = c
            break
    if not cpu:
        await callback.answer("–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π CPU –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä CPU
    await state.update_data(cpu=cpu)
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–∞—Ç–µ—Ä–∏–Ω—Å–∫—É—é –ø–ª–∞—Ç—É –ø–æ–¥ —ç—Ç–æ—Ç CPU
    mobos = await db.select_motherboards(cpu['socket'])
    if not mobos:
        await callback.message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã –¥–ª—è —Å–æ–∫–µ—Ç–∞ " + cpu['socket'])
        await state.clear()
        return
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–ª–∞—Ç (–ø–µ—Ä–≤—ã–µ 5)
    mobo_buttons = []
    for mobo in mobos[:5]:
        mobo_buttons.append([InlineKeyboardButton(
            text=f"{mobo['name']} ({mobo['price']} ‚ÇΩ)", 
            callback_data=f"mobo_{mobo['id']}"
        )])
    mobo_kb = InlineKeyboardMarkup(inline_keyboard=mobo_buttons)
    await callback.message.answer("–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º CPU:", reply_markup=mobo_kb)
    await state.set_state(BuildManualState.choosing_motherboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith("mobo_"), StateFilter(BuildManualState.choosing_motherboard))
async def manual_choose_mobo(callback: CallbackQuery, state):
    mobo_id = int(callback.data.split("mobo_")[1])
    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–Ω—Å–∫—É—é –ø–ª–∞—Ç—É
    mobos = await db.select_motherboards(socket=None)  # –ø–æ–ª—É—á–∏–º –≤—Å–µ, –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–µ–º –Ω—É–∂–Ω—É—é
    mobo = None
    for m in mobos:
        if m['id'] == mobo_id:
            mobo = m
            break
    if not mobo:
        await callback.answer("–û—à–∏–±–∫–∞: –º–∞—Ç. –ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    await state.update_data(motherboard=mobo)
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –û–ó–£ (—Ç–∏–ø –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–ª–∞—Ç—ã)
    ram_type = mobo['ram_type']
    rams = await db.select_rams(ram_type, needed_size=8)
    ram_buttons = []
    for ram in rams[:5]:
        ram_buttons.append([InlineKeyboardButton(text=f"{ram['name']} ({ram['price']} ‚ÇΩ)", callback_data=f"ram_{ram['id']}")])
    if not ram_buttons:
        ram_buttons.append([InlineKeyboardButton(text="–ù–µ—Ç –º–æ–¥—É–ª–µ–π –û–ó–£ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ —Ç–∏–ø–∞", callback_data="ignore")])
    ram_kb = InlineKeyboardMarkup(inline_keyboard=ram_buttons)
    await callback.message.answer(f"–û–ó–£ (—Ç–∏–ø {ram_type}):", reply_markup=ram_kb)
    await state.set_state(BuildManualState.choosing_ram)
    await callback.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith("ram_"), StateFilter(BuildManualState.choosing_ram))
async def manual_choose_ram(callback: CallbackQuery, state):
    ram_id = int(callback.data.split("ram_")[1])
    # –ü–æ–ª—É—á–∞–µ–º RAM
    data = await state.get_data()
    ram_list = await db.select_rams(data.get('motherboard')['ram_type'], needed_size=0)
    ram = next((r for r in ram_list if r['id'] == ram_id), None)
    if not ram:
        await callback.answer("–û—à–∏–±–∫–∞: –û–ó–£ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    await state.update_data(ram=ram)
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É
    gpus = await db.select_gpus()
    gpu_buttons = []
    if gpus:
        for gpu in gpus[:5]:
            gpu_buttons.append([InlineKeyboardButton(text=f"{gpu['name']} ({gpu['price']} ‚ÇΩ)", callback_data=f"gpu_{gpu['id']}")])
    else:
        gpu_buttons.append([InlineKeyboardButton(text="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ GPU", callback_data="ignore")])
    gpu_kb = InlineKeyboardMarkup(inline_keyboard=gpu_buttons)
    await callback.message.answer("–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã:", reply_markup=gpu_kb)
    await state.set_state(BuildManualState.choosing_gpu)
    await callback.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith("gpu_"), StateFilter(BuildManualState.choosing_gpu))
async def manual_choose_gpu(callback: CallbackQuery, state):
    gpu_id = int(callback.data.split("gpu_")[1])
    # –ü–æ–ª—É—á–∞–µ–º GPU
    gpu_list = await db.select_gpus()
    gpu = next((g for g in gpu_list if g['id'] == gpu_id), None)
    if not gpu:
        await callback.answer("–û—à–∏–±–∫–∞: GPU –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    await state.update_data(gpu=gpu)
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å
    storages = await db.select_storages(min_capacity=256)
    storage_buttons = []
    for st in storages[:5]:
        storage_buttons.append([InlineKeyboardButton(text=f"{st['name']} ({st['price']} ‚ÇΩ)", callback_data=f"sto_{st['id']}")])
    storage_kb = InlineKeyboardMarkup(inline_keyboard=storage_buttons)
    await callback.message.answer("–ù–∞–∫–æ–ø–∏—Ç–µ–ª–∏:", reply_markup=storage_kb)
    await state.set_state(BuildManualState.choosing_storage)
    await callback.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith("sto_"), StateFilter(BuildManualState.choosing_storage))
async def manual_choose_storage(callback: CallbackQuery, state):
    sto_id = int(callback.data.split("sto_")[1])
    storage_list = await db.select_storages(min_capacity=0)
    storage = next((s for s in storage_list if s['id'] == sto_id), None)
    if not storage:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    await state.update_data(storage=storage)
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–æ—Ä–ø—É—Å (—Å —É—á–µ—Ç–æ–º —Ñ–æ—Ä–º-—Ñ–∞–∫—Ç–æ—Ä–∞ –∏ –¥–ª–∏–Ω—ã –≤–∏–¥–µ–æ)
    data = await state.get_data()
    mobo = data.get('motherboard')
    gpu = data.get('gpu')
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä–ø—É—Å –±–µ–∑ —É—á—ë—Ç–∞ –¥–ª–∏–Ω—ã GPU (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
    cases = await db.select_cases(mobo['form_factor'], gpu_length=None)
    case_buttons = []
    for case in cases[:5]:
        case_buttons.append([InlineKeyboardButton(text=f"{case['name']} ({case['price']} ‚ÇΩ)", callback_data=f"case_{case['id']}")])
    case_kb = InlineKeyboardMarkup(inline_keyboard=case_buttons)
    await callback.message.answer("–ö–æ—Ä–ø—É—Å–∞:", reply_markup=case_kb)
    await state.set_state(BuildManualState.choosing_case)
    await callback.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith("case_"), StateFilter(BuildManualState.choosing_case))
async def manual_choose_case(callback: CallbackQuery, state):
    case_id = int(callback.data.split("case_")[1])
    case_list = await db.select_cases(form_factor="", gpu_length=None)
    case = next((c for c in case_list if c['id'] == case_id), None)
    if not case:
        await callback.answer("–û—à–∏–±–∫–∞: –∫–æ—Ä–ø—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    await state.update_data(case=case)
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è (–º–æ—â–Ω–æ—Å—Ç—å —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ CPU+GPU)
    data = await state.get_data()
    cpu = data.get('cpu')
    gpu = data.get('gpu')
    total_tdp = 0
    if cpu: total_tdp += cpu.get('tdp') or 0
    if gpu: total_tdp += gpu.get('tdp') or 0
    required_power = int(total_tdp * 1.2) + 50
    psus = await db.select_psus(required_power)
    psu_buttons = []
    for psu in psus[:5]:
        psu_buttons.append([InlineKeyboardButton(text=f"{psu['name']} ({psu['power']}W, {psu['price']} ‚ÇΩ)", callback_data=f"psu_{psu['id']}")])
    psu_kb = InlineKeyboardMarkup(inline_keyboard=psu_buttons)
    await callback.message.answer("–ë–ª–æ–∫–∏ –ø–∏—Ç–∞–Ω–∏—è:", reply_markup=psu_kb)
    await state.set_state(BuildManualState.choosing_psu)
    await callback.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith("psu_"), StateFilter(BuildManualState.choosing_psu))
async def manual_choose_psu(callback: CallbackQuery, state):
    psu_id = int(callback.data.split("psu_")[1])
    psu_list = await db.select_psus(0)
    psu = next((p for p in psu_list if p['id'] == psu_id), None)
    if not psu:
        await callback.answer("–û—à–∏–±–∫–∞: –ë–ü –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    await state.update_data(psu=psu)
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É–ª–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ)
    data = await state.get_data()
    cpu = data.get('cpu')
    cooler_buttons = []
    if cpu:
        coolers = await db.select_coolers(cpu['socket'], cpu.get('tdp') or 65)
        for col in coolers[:5]:
            cooler_buttons.append([InlineKeyboardButton(text=f"{col['name']} ({col['price']} ‚ÇΩ)", callback_data=f"col_{col['id']}")])
    if cooler_buttons:
        cooler_kb = InlineKeyboardMarkup(inline_keyboard=cooler_buttons + [[InlineKeyboardButton(text="–ë–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫—É–ª–µ—Ä–∞", callback_data="col_none")]])
        await callback.message.answer("–ö—É–ª–µ—Ä—ã (–≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω):", reply_markup=cooler_kb)
    else:
        await callback.message.answer("–û—Ç–¥–µ–ª—å–Ω—ã–π –∫—É–ª–µ—Ä –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–ª–∏ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
    await state.set_state(BuildManualState.choosing_cooler)
    await callback.answer()

@dp.callback_query(lambda c: c.data and (c.data.startswith("col_") or c.data == "col_none"), StateFilter(BuildManualState.choosing_cooler))
async def manual_choose_cooler(callback: CallbackQuery, state):
    if callback.data == "col_none":
        cooler = None
    else:
        col_id = int(callback.data.split("col_")[1])
        cooler_list = await db.select_coolers(socket="", required_tdp=0)
        cooler = next((col for col in cooler_list if col['id'] == col_id), None)
        if not cooler:
            await callback.answer("–û—à–∏–±–∫–∞: –∫—É–ª–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
    await state.update_data(cooler=cooler)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    data = await state.get_data()
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–±–æ—Ä–∫–∏
    total_price = 0
    summary = "üîß *–°–æ–±—Ä–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:*\n"
    if data.get('cpu'):
        cpu = data['cpu']; total_price += cpu['price']; summary += f"- CPU: {cpu['name']} ({cpu['price']} ‚ÇΩ)\n"
    if data.get('motherboard'):
        mb = data['motherboard']; total_price += mb['price']; summary += f"- –ú–∞—Ç. –ø–ª–∞—Ç–∞: {mb['name']} ({mb['price']} ‚ÇΩ)\n"
    if data.get('ram'):
        ram = data['ram']; total_price += ram['price']; summary += f"- –û–ó–£: {ram['name']} ({ram['price']} ‚ÇΩ)\n"
    if data.get('gpu'):
        gpu = data['gpu']; total_price += gpu['price']; summary += f"- –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: {gpu['name']} ({gpu['price']} ‚ÇΩ)\n"
    else:
        summary += "- –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: (–Ω–µ –≤—ã–±—Ä–∞–Ω–∞)\n"
    if data.get('storage'):
        sto = data['storage']; total_price += sto['price']; summary += f"- –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å: {sto['name']} ({sto['price']} ‚ÇΩ)\n"
    if data.get('case'):
        case = data['case']; total_price += case['price']; summary += f"- –ö–æ—Ä–ø—É—Å: {case['name']} ({case['price']} ‚ÇΩ)\n"
    if data.get('psu'):
        psu = data['psu']; total_price += psu['price']; summary += f"- –ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è: {psu['name']} ({psu['price']} ‚ÇΩ)\n"
    if data.get('cooler'):
        col = data['cooler']; total_price += col['price']; summary += f"- –ö—É–ª–µ—Ä: {col['name']} ({col['price']} ‚ÇΩ)\n"
    summary += f"*–ò—Ç–æ–≥–æ:* {total_price} ‚ÇΩ\n"
    summary += "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É —Å–±–æ—Ä–∫—É?"
    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="manual_save")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="manual_cancel")]
    ])
    await callback.message.answer(summary, parse_mode="Markdown", reply_markup=confirm_kb)
    await state.set_state(BuildManualState.confirm)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "manual_save", StateFilter(BuildManualState.confirm))
async def manual_save_build(callback: CallbackQuery, state):
    user_id = await db.get_user_id(callback.from_user.id)
    data = await state.get_data()
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å build –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    build_data = {
        'cpu_id': data['cpu']['id'] if data.get('cpu') else None,
        'motherboard_id': data['motherboard']['id'] if data.get('motherboard') else None,
        'ram_id': data['ram']['id'] if data.get('ram') else None,
        'gpu_id': data['gpu']['id'] if data.get('gpu') else None,
        'storage_id': data['storage']['id'] if data.get('storage') else None,
        'case_id': data['case']['id'] if data.get('case') else None,
        'psu_id': data['psu']['id'] if data.get('psu') else None,
        'cooler_id': data['cooler']['id'] if data.get('cooler') else None,
        'total_price': 0
    }
    # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å total_price
    for comp in ['cpu', 'motherboard', 'ram', 'gpu', 'storage', 'case', 'psu', 'cooler']:
        if data.get(comp):
            build_data['total_price'] += data[comp]['price']
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–±–æ—Ä–∫—É
    await db.save_build(user_id, build_data)
    await callback.message.answer(
        "‚úÖ –°–±–æ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
    )
    await db.log_action(user_id, "manual_build_saved")
    await state.clear()

@dp.callback_query(lambda c: c.data == "manual_cancel", StateFilter(BuildManualState.confirm))
async def manual_cancel_build(callback: CallbackQuery, state):
    # –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.message.answer("–°–±–æ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.")
    await state.clear()
    await callback.answer()

# –û–±—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –Ω–∞ –æ—Ç–º–µ–Ω—É /cancel (—Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
@dp.message(Command("cancel"))
@dp.message(lambda m: m.text and m.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state):
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await state.clear()
    # –ú–æ–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é /start –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ inline-–∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    menu_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü–æ–¥–æ–±—Ä–∞—Ç—å —Å–±–æ—Ä–∫—É", callback_data="auto")],
        [InlineKeyboardButton(text="üõ† –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º —Å–±–æ—Ä–∫–∏", callback_data="manual")],
        [InlineKeyboardButton(text="üíæ –ú–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–±–æ—Ä–∫–∏", callback_data="view_builds")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
    ])
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_kb)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π
    await db.connect()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
